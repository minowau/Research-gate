type Error = variant {
    NotFound;
    Unauthorized;
    InvalidInput : text;
    InsufficientTokens;
    AlreadyExists;
    NotImplemented;
};

type PaperStatus = variant {
    published;
    under_review;
    draft;
};

type Paper = record {
    id : text;
    title : text;
    abstract : text;
    authors : vec text;
    institution : text;
    publishedDate : int;
    tags : vec text;
    citations : nat;
    downloads : nat;
    doi : opt text;
    status : PaperStatus;
    fileUrl : opt text;
    submitter : principal;
    reviewers : vec principal;
    reviewScore : float64;
};

type PaperSubmission = record {
    title : text;
    abstract : text;
    authors : vec text;
    institution : text;
    tags : vec text;
    doi : opt text;
    fileData : blob;
    category : text;
};

type User = record {
    id : principal;
    name : text;
    email : text;
    institution : text;
    avatar : opt text;
    reputation : float64;
    rezTokens : nat;
    joinedAt : int;
    papersSubmitted : vec text;
    papersReviewed : vec text;
};

type UserProfile = record {
    name : text;
    email : text;
    institution : text;
    avatar : opt text;
};

type Review = record {
    id : text;
    paperId : text;
    reviewer : principal;
    score : nat;
    comments : text;
    isPublic : bool;
    timestamp : int;
};

type SearchQuery = record {
    keywords : opt text;
    tags : opt vec text;
    authors : opt vec text;
    institution : opt text;
    dateFrom : opt int;
    dateTo : opt int;
    status : opt PaperStatus;
};

type PaginationParams = record {
    page : nat;
    limit : nat;
};

type PaginatedResult = record {
    data : vec Paper;
    total : nat;
    page : nat;
    limit : nat;
    hasNext : bool;
};

type Result = variant {
    ok : text;
    err : Error;
};

type ResultUser = variant {
    ok : User;
    err : Error;
};

type ResultPaper = variant {
    ok : Paper;
    err : Error;
};

type ResultUnit = variant {
    ok : null;
    err : Error;
};

service : {
    // User management
    registerUser : (UserProfile) -> (ResultUser);
    getUser : () -> (ResultUser) query;
    updateUserProfile : (UserProfile) -> (ResultUser);

    // Paper management
    submitPaper : (PaperSubmission) -> (Result);
    getPaper : (text) -> (ResultPaper) query;
    getAllPapers : (PaginationParams) -> (PaginatedResult) query;
    searchPapers : (SearchQuery, PaginationParams) -> (PaginatedResult) query;
    incrementDownloads : (text) -> (ResultUnit);

    // Review system
    submitReview : (text, nat, text, bool) -> (Result);
    getReviewsForPaper : (text) -> (vec Review) query;

    // Statistics
    getPaperStats : () -> (record {
        totalPapers : nat;
        publishedPapers : nat;
        underReviewPapers : nat;
    }) query;
    getUserStats : (principal) -> (variant {
        ok : record {
            papersSubmitted : nat;
            papersReviewed : nat;
            reputation : float64;
        };
        err : Error;
    }) query;

    // Admin functions
    updatePaperStatus : (text, PaperStatus) -> (ResultUnit);

    // Utility functions
    getPopularTags : (nat) -> (vec record { text; nat }) query;
    getTrendingPapers : (nat) -> (vec Paper) query;
}